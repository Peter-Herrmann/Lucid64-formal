[options]

# ISA extensions, e.g. RV64IMAFD, or rv32i. 
# Note that X and Z extensions are not currently supported and should be removed from the string.
isa rv64imc

#The number of channels for the RVFI port.
nret 1

# Signifies register file and ALU should be black-boxed.
# blackbox

# solver boolector

# Passed to smtbmc engine to output SMT2 trace.
# dumpsmt2

# Generated makefile will use absolute path of generated files.
# abspath

# Solver mode, currently supports either bmc or prove
# mode bmc

[depth]
# This section provides the execution depth to be used by the solver for each test.
# The name of the check is listed, followed by one or more integers separated by a space.

# For cores with multiple channels, the channel number can be used in the name of the 
# check by appending _ch#. Note that a more specific name will be used over a less specific name.
# For example, if insn <depth0> and insn_ch1 <depth1> are both listed, insn tests on channel 1 
# will use depth1, while all other channels will use depth0.

# If a formal check does not have a corresponding depth listed, it will not be generated. For 
# example, providing reg_ch2 <values> but not reg <values> will run the reg check only on channel 2.

insn 15

# pc_fwd is currently failing because of trap handling. This requires some core redesign and should
# be done carefully.
pc_fwd 1 15
pc_bwd 1 15

reg 1 15

causal 1 15
# causal_mem 1 6
# causal_io 1 6

liveness_check 1 6 15

unique 1 6 15

# This requires implementing the extra mem_fault signals, and optionally the mcause signal in rvfi
# fault 1 6

# There is considerably more setup needed to define the CSRs on a core (TODO)
# csrc_any 1 6
# csrc_const 1 6
# csrc_hpm 1 6
# csrc_inc 1 6
# csrc_upcnt 1 6
# csrc_zero 1 6

# csr_ill 6
# csrw 6

# Currently, the design can hang for memory requests. The wrapper could add a timeout to prevent this.
# hang 1 6 12
ill 15

[groups]
# This section defines a list of group names which are prepended to all check names which can then be 
# used for grouping multiple checks together. These groups can then be used for testing with 
# multiple depth values. Each group must be separated by whitespace.

[sort]
# If this section is included, any listed checks will be run in the order they appear in this list, 
# and will be run before any un-listed checks. Each item should be placed on its own line. When 
# multiple checks match the same ordering, alphabetical order will be used.
reg_ch0
pc_fwd_ch0
pc_bwd_ch0
reg_ch0
unique_ch0
ill_ch0
insn_ld_ch0
insn_lw_ch0
insn_beq_ch0

[filter-checks]
# Specific checks can be enabled or disabled by adding them to this section prefixed with either 
# a + or - and a space. As with [sort] above, regex is used for matching against each line. 
# Note that the first match returns. For example, if + insn_(mul|div)_ch1 is listed before 
# - insn_.*_ch1, then the mul and div instructions will be enabled for testing on channel 1, 
# while all other instructions are disabled.
- .*(mul|div|rem).*

[assume]
# Each line of this section provides a two value tuple. The first value is the regex pattern 
# used to match the current check name, while the second value is code to be included in the 
# file assume_stmts.vh. If the first value begins with a !, the code is used for all checks 
# that do not match the pattern, otherwise the code is used for all checks that do match. 
# This file is included verbatim at the end of the rvfi_testbench module in 
# checks/rvfi_testbench.sv, and so should be valid System Verilog code.


###################################################################################################
####                                     Verbatim Sections                                     ####
###################################################################################################
# A number of sections are included in the sby script essentially as-is. These sections are 
# formatted with a few keyword substitutions. If using these substitutions, the keywords should 
# be prepended and appended with a @ symbol, e.g. @basedir@/cores/@core@/wrapper.sv is using the 
# basedir and core keywords to define the path.

[script-defines]
# This section is included at the start of the sby [script] section. Check specific code can 
# also be included as [script-defines <check>], where <check> is the current check.


[verilog-files]
# These sections list all of the core source files which should be included in testing. 
# All verilog files will be listed after read -sv
@basedir@/cores/@core@/rvfi_wrapper.sv
@basedir@/cores/@core@/src/*.v

[script-sources]
# This section can be used to add any other source files which do not fit under 
# -sv or -vhdl, and is included before the prep command.

[script-link]
# This section is included after the prep command and before chformal.

[defines]
# This section is included as part of [file defines.sv]. Check specific code can also be included 
# as [defines <check>], where <check> is the current check.

# Core parameters
`define LUCID64_RVFI

`define ADDRESS_WD                64
`define RESET_VECTOR              32'h8000_0000

# Enforce aligned memory access (defines expected trap behavior on load/store)
`define RISCV_FORMAL_ALIGNED_MEM

# Needed to check fault above:
# `define RISCV_FORMAL_MEM_FAULT 
# `define RISCV_FORMAL_CSR_MCAUSE 
